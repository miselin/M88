
2024-04-15: first prototype board works.

Issues that came up bringing the thing online:
- CS# signals are all floating until IO#/M is pulled low, need a pull-up! (test with 7SEG_CS#)
  - they actually aren't floating, this was a misunderstanding
- 74LS154 are wide not narrow footprints
  - buying adapters for this, but need to fix in next fab
- is the memory 128K or 64K??
  - it is 128K, but the DMUX 74LS154 is taking A16/A18/A19 into account, which limits RAM to 64K
  - quick fix is to tie pins 21, 22, 23 to GND
  - need a better way to do CS#'s for RAM & BIOS
- just use an 8-bit latch/register for the 7-seg, the 4-bit one is a pain to find


74LS154s are kinda hard to find. Look into more readily available options...
 - 74LS138s are much easier to find (Mouser has them!) - 3-to-8.
   Truly simpler logic.

todo:
- [x] Move to 8-bit latch for 7-seg (with two displays, why not)
- [x] Stop using LS154s
- [ ] Condense all the memory chip selects into one DMUX
- [ ] Fix BIOS ROM chip select after ^ happens
- [ ] Consider adding 128K of RAM at 0x80000


2024-04-22: PCB routing is done on the main board

Considering doing a run with DNP on most of the ancillary stuff (PS/2, ISA bus, etc) to test DMA

Realized that I/O port 0x60 is a combo of Intel PPI and the KB controller!
- 0x60, 0x64 (A0, A2) select the KBC
- 0x61, 0x62, 0x63 select the 3x PPI outputs
- 0x61 is where the speaker gate comes from!

IBM PC AT used a PROM with A0, A4, to do chip select for RTC (0x70) and KBC (0x60/0x64), and to
generate RTC RD/~WR signal from IOW/IOR. (PROM also got the 0x60-0x80 I/O CS~)

In the PC/AT, they removed the PPI and kept only "Port B" functions on port 0x61 e.g. PC speaker gate

2024-04-23: decided to do a fab run without assembly, I'll just have to solder the SMT stuff

- Added an SMC using an ATtiny, this looks after the ATX power signal and resets
- Added a PC speaker

2024-04-24: PS/2 controller design tested with breadboard, confirmed working

2024-04-25:

- When preparing a Mouser shopping cart, I notice I forgot the pull-ups on the 7406 outputs for PS/2!
  - gonna have to bodge these in - keyboad/mouse won't work without it

2024-05-03:

- First board is fully soldered and populated
- U1 (74LS74 for DMA HRQ) seems to be incorrect, removing it for now and bodging pin 5 to pin 7
  - otherwise the CPU stays in permanent HOLD
- gate logic for 74LS138 demuxes is inverted
  - IS_IO# sould be the NAND of MEMW# and MEMR#
  - passing both MEMW# and MEMR# to the memory demux means it never activates

2024-05-04:

- Thinking for DMA HRQ, lift pin 5 and bridge 5/6 with solder jumper - use Q# output instead of Q output (inverted)
- Bodged the 74LS138s as needed to create the right signals
- Multi-function serial ISA card works!
- VGA card ALMOST works
  - it looks like it is pulling I/O CH RDY low to extend memory access duration for VRAM
  - my circuit is not responding in turn, so READY stays HIGH and we get glitchy rendering

For 8284 fix...
- may need to make RDY2 (pin 6) GND and AEN2 (pin 7) 5V (i.e. swap their values)
- this makes RDY1/AEN1 the only ready pair that matters?

Look at the datasheet block diagram, it makes sense:

RDY1 = 1
AEN1 = 0
RDY2 = 1
AEN2 = 0


(RDY1 && !AEN1) | (RDY2 && !AEN2)
(1 && !0) | (1 && !0) = 1 | 1 = 1

--

RDY1 = 0
AEN1 = 0
RDY2 = 1
AEN2 = 0

(0 && !0) | (1 && !0) = 0 | 1 = 1

--

RDY1 = 0
AEN1 = 0
RDY2 = 0
AEN2 = 1

(0 && !0) | (0 && !1) = 0 | 0 = 0

--

RDY1 = 1
AEN1 = 0
RDY2 = 0
AEN2 = 1

(1 && !0) | (0 && !1) = 1 | 0 = 1

2024-05-05:

- Tested 8284 fix with jumper wires (no soldering) - VGA no longer has corrupted visuals!
  - means the READY generator was indeed held wrong in the schematic
- All that remains is figuring out DMA HRQ - currently holds 8088 HOLD line HIGH permanently
  - PRE# and CLR# are both LOW (PRE# = GND, CLR# = RESET which is active-high) - this is an invalid state for the 74LS74!
  - PRE# should be 5V. CLR# can be the RESET# signal instead of the DMA's active-high RESET
  - That should fix the circuit and stop the accidentally permanent HOLD
  - 5150 and other schematics use an inverter on HRQ. Why? It's active-high on the DMA controller too?
    - HRQ -> pull-up -> LS04 (inverter) -> HRQ_DMA#
    - HRQ_DMA# goes into a NAND with a 5V pull-up (?)
    - this inverter + NAND means it is back to active high?
    - this goes into a mega-NAND + inverter + flip-flop to generate HOLDA (maximum mode 8088)
    - HOLDA is cleared by the inverted HRQ_DMA# signal (i.e. HRQ), so when HRQ goes LOW this should clear HOLDA (makes sense)
    - this is decoding S0#, S1#, S2#, LOCK# - all 1 = "passive" i.e. the CPU released the bus (in MAXIMUM mode)
    - DMA_WAIT# is generated from HOLDA (HOLDA -> flip-flop D0 -> Q0 -> flip-flop D1 -> Q1# -> DMA_WAIT#)
    - DMA_WAIT# is used in addition to the RDY#/WAIT signal (generated from either ISA I/O CH RDY or a few other signals)
    - that means that READY will correlate to DMA state and hold the CPU passive until the DMA completes
    - READY goes low, HLDA will go high once status bits indicate passive, READY goes high (DMA done, ISA stops stretching memory access time), HLDA returns to normal state
    - tl;dr it's because maximum mode.
  - so... in my design, with a single 8088, HRQ can just go straight to the CPU
    - jump pins 2 and 5.
    - OR, fix PRE# and CLR# to both point at 5V. this will push HRQ through the flip-flop which might help with buffering
- One small bug - I/O select on the board doesn't account for DMA active cycle lowering IOR and MEMW simultaneously
  - need to probably use DMA_AEN# to check (attached to active-high)
  - i.e. do NOT chip-select onboard I/O if DMA is active - could we use HOLDA in min mode instead?
  - schematic fixed accordingly

2024-05-11:

- XT-IDE is soldered and its ROM is running
- found out that the PIC is dead, swapped in a known good chip, much better
- KBC CS# is getting activated too often (on CMOS port 0x70, ports 0x61, 0x62, 0x63) and causing problems!
  - biggest problem is that its buffer is filling up due to this, so BIOS can't send any commands
- bodged the KBC issues with an FPGA to generate the right CS# from A0-A4 and the original CS#
- DOS runs. CIV runs. lack of arrow key / num pad support on the keyboard is a problem...

bugs found from a real use session:
- modifier keys (alt, ctrl, shift) seem to behave oddly esp. in EDIT, games
- if the KB buffer overruns, it can't be emptied (because head == tail)
- "mem" sometimes just hangs
- "edit" doesn't exit cleanly, maybe related to modifier keys issues
